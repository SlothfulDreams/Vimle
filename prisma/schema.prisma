// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client"
  output          = "../lib/generated/prisma"
  engineType      = "library"
  previewFeatures = ["driverAdapters"]
  moduleFormat    = "esm"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String   @id @db.Uuid
  email        String   @unique
  name         String?
  display_name String?
  avatar_url   String?
  preferences  Json?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  attempts ChallengeAttempt[]

  @@map("users")
}

model Challenge {
  id                String   @id @default(cuid())
  date              DateTime @unique @db.Date
  starting_content  String? // Starting code that users need to edit
  content           String
  title             String
  difficulty        String   @default("medium")
  prompt_used       String? // Track AI prompt used for generation
  generated_by      String   @default("static") // "static" | "gemini"
  validation_status String   @default("validated") // "pending" | "validated" | "failed"
  created_at        DateTime @default(now())

  attempts ChallengeAttempt[]

  @@map("challenges")
}

model ChallengeAttempt {
  id           String    @id @default(cuid())
  user_id      String    @db.Uuid
  challenge_id String
  completed_at DateTime?
  time_ms      Int?
  attempt_date DateTime  @default(now())

  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challenge_id], references: [id], onDelete: Cascade)

  @@unique([user_id, challenge_id])
  @@map("challenge_attempts")
}
